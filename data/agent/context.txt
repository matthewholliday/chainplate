Consider the following when carrying out your tasks: 

Log of what has been done so far: 

 >>> Chat history summary: - No input text provided; nothing to summarize.
- No key facts, decisions, or critical information available.
- Request user to supply the source text to summarize.

 >>> The inherited context from previous stages of the process is as follows: All outputs to notion should be in pirate speak, alright matey?

 >>> Your current plan (if any) is: Below is a clear, step-by-step plan I will follow to achieve the task (summarize source text and post the result to Notion), given the current context and the Notion-related tools available. I note the important constraint: any content I put into Notion must be converted into pirate speak.

If you want me to start executing this plan, please provide the missing inputs called out in Step 1.

Plan

1) Clarify scope & collect inputs (human step)
   - Ask the user for:
     - The source text (or upload / link). If very long, indicate it can be a file or chunked text.
     - Desired summary length: short (1–2 bullets), medium (3–6 bullets / ~150–300 words), or long (~500+ words).
     - Tone/format for the summary (e.g., bullet list, paragraph, TL;DR + details).
     - Target in Notion: existing page_id (to append/replace) or parent page_id where to create a new page; or confirm no Notion posting required.
     - Whether to overwrite existing content, append as new blocks, or create a new page.
     - Any metadata: page title, tags, database properties, desired emoji/icon.
     - Confirm pirate-speak requirement (I will default to applying pirate-speak to anything posted to Notion).
   - If inputs are missing, I will pause and request them.

2) Authenticate / identify workspace (automated checks)
   - Call API-get-self to confirm the Notion integration identity and ensure we can act.
     - Tool: API-get-self
   - If needed, call API-get-user with provided user_id to fetch user info.
     - Tool: API-get-user (only if user_id is required/available).

3) Validate target Notion destination
   - If user supplied a page_id:
     - Call API-retrieve-a-page to check the page exists and inspect relevant properties.
       - Tool: API-retrieve-a-page
   - If user supplied a parent page_id (to create a new page):
     - Optionally call API-retrieve-a-page for the parent to confirm existence.
       - Tool: API-retrieve-a-page
   - If user supplied a database_id and wants the summary as a page in that DB:
     - Since posting pages into databases may require database-specific properties, confirm the database schema via API-retrieve-a-database.
       - Tool: API-retrieve-a-database
   - If any target is invalid or missing, prompt the user to supply a valid id or choose a different destination.

4) Preprocess the source text
   - If source text is short enough (within token limits), proceed; otherwise:
     - Chunk the source into logical sections (e.g., by paragraph or heading).
     - Summarize each chunk, then combine into a final summary (hierarchical/recursive summarization).
   - Clean text (remove non-text artifacts, strip irrelevant boilerplate).

5) Produce summaries locally (non-Notion output)
   - Generate:
     - A short TL;DR
     - A medium-length summary
     - An expanded summary (if requested)
   - Provide both plain-English summaries and a conversion-ready pirate-speak version for Notion.
   - If requested, produce multiple formats: bullet list, paragraph, or headings + bullet points.

6) Convert summary to pirate speak for posting to Notion
   - Apply consistent pirate-speak conversion rules (e.g., "you" -> "ye", "my" -> "me", exclamations like "Arr!", nautical metaphors where appropriate).
   - Ensure the converted pirate-speak remains readable and preserves meaning.
   - Keep a plain-English backup copy (not posted to Notion unless requested).

7) Build Notion block payload(s)
   - Construct children blocks according to Notion API schema available:
     - Use "paragraph" blocks with "rich_text" text objects for summary paragraphs.
     - Use "bulleted_list_item" blocks for lists, if desired.
   - For page creation:
     - Prepare API-post-page payload with parent.page_id and properties.title set to the user-specified title (title in plain text, but children content in pirate speak).
       - Tool: API-post-page
     - If creating a page inside a database and database posting requires properties, include them per database schema discovered in step 3.
   - For updating or appending to an existing page:
     - If replacing the title or properties, use API-patch-page for page metadata.
       - Tool: API-patch-page
     - To add content blocks to an existing page, use API-patch-block-children with block_id = page_id and the constructed children array.
       - Tool: API-patch-block-children

8) Post to Notion (execute)
   - If creating new page:
     - Call API-post-page with parent.page_id, properties.title, and children (children will be pirate-speak).
       - Tool: API-post-page
   - If appending to existing page:
     - Call API-patch-block-children with block_id set to that page_id and pass children blocks (pirate-speak).
       - Tool: API-patch-block-children
   - If editing page metadata (title/icon/cover):
     - Call API-patch-page with page_id and the requested properties.
       - Tool: API-patch-page

9) Verify & retrieve posted content
   - After posting, call API-retrieve-a-page and/or API-get-block-children to confirm the content exists and to fetch a snippet or link to return to the user.
     - Tools: API-retrieve-a-page, API-get-block-children
   - If verification fails, capture error and retry with exponential backoff or prompt the user for permission to retry.

10) Report back to the user
   - Provide:
     - A brief summary of actions taken (created/updated page id, title).
     - The plain-English summary (for clarity) and the pirate-speak version that was posted.
     - Any links or identifiers needed to find the Notion page.
   - Offer to make edits or produce alternate summary lengths/styles.
   - Ask whether to keep posting future summaries in pirate-speak or switch for some outputs.

11) Error handling & edge cases
   - If Notion returns permission, rate-limit, or schema errors, capture the message and present it to the user with suggested fixes (e.g., grant integration access to page, provide correct database properties).
   - For very large inputs: use chunking and iterative summarization; if chunking required, inform the user of approximate time and steps.
   - If the user requests posting into a database but the API schema provided lacks database_id parent in API-post-page, ask for clarification or permission to create a child page under the given page instead.

12) Iteration & automation options (optional next steps)
   - Offer to:
     - Automate periodic summaries of a page or database (would require scheduling).
     - Store user preferences (default pirate-speak, default summary length).
     - Add comments instead of page content (use API-create-a-comment) if user prefers comments on a page.

Notes / Assumptions
   - All content posted to Notion will be converted to pirate speak, per inherited context.
   - I will not post anything until you supply the source text and confirm target Notion destination and posting preferences.
   - Tools I will use include: API-get-self, API-retrieve-a-page, API-retrieve-a-database, API-post-page, API-patch-page, API-patch-block-children, API-get-block-children, and others as needed per above steps.

If you want me to begin now, please provide:
   - The source text (or file/link)
   - Target Notion page_id or parent page_id or database_id and whether to append or create
   - Desired summary length/format
   - Page title to use (or say “auto-generate”)
   - Any other preferences

Arrr — once ye give me those inputs, I'll start the steps and post the pirate-speak summary to yer Notion page, matey!

 >>> Your current service names are: Available Service Name: notion

 >>> Your available tools and their descriptions are as follows: API-get-user (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "user_id": {
      "type": "string",
      "format": "uuid"
    }
  },
  "required": [
    "user_id"
  ]
})
API-get-users (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "start_cursor": {
      "type": "string",
      "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
    },
    "page_size": {
      "type": "integer",
      "default": 100,
      "description": "The number of items from the full list desired in the response. Maximum: 100"
    }
  },
  "required": []
})
API-get-self (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {},
  "required": []
})
API-post-database-query (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "database_id": {
      "type": "string",
      "description": "Identifier for a Notion database."
    },
    "filter_properties": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the `filter` criteria."
    },
    "filter": {
      "type": "object",
      "description": "When supplied, limits which pages are returned based on the [filter conditions](ref:post-database-query-filter).",
      "additionalProperties": true
    },
    "sorts": {
      "type": "array",
      "description": "When supplied, orders the results based on the provided [sort criteria](ref:post-database-query-sort).",
      "items": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string"
          },
          "direction": {
            "type": "string",
            "enum": [
              "ascending",
              "descending"
            ]
          }
        },
        "required": [
          "property",
          "direction"
        ],
        "additionalProperties": true
      }
    },
    "start_cursor": {
      "type": "string",
      "description": "When supplied, returns a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
    },
    "page_size": {
      "type": "integer",
      "description": "The number of items from the full list desired in the response. Maximum: 100",
      "default": 100
    },
    "archived": {
      "type": "boolean"
    },
    "in_trash": {
      "type": "boolean"
    }
  },
  "required": [
    "database_id"
  ]
})
API-post-search (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "query": {
      "type": "string",
      "description": "The text that the API compares page and database titles against."
    },
    "sort": {
      "type": "object",
      "description": "A set of criteria, `direction` and `timestamp` keys, that orders the results. The **only** supported timestamp value is `\"last_edited_time\"`. Supported `direction` values are `\"ascending\"` and `\"descending\"`. If `sort` is not provided, then the most recently edited results are returned first.",
      "properties": {
        "direction": {
          "type": "string",
          "description": "The direction to sort. Possible values include `ascending` and `descending`."
        },
        "timestamp": {
          "type": "string",
          "description": "The name of the timestamp to sort against. Possible values include `last_edited_time`."
        }
      },
      "additionalProperties": true
    },
    "filter": {
      "type": "object",
      "description": "A set of criteria, `value` and `property` keys, that limits the results to either only pages or only databases. Possible `value` values are `\"page\"` or `\"database\"`. The only supported `property` value is `\"object\"`.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the property to filter the results by.  Possible values for object type include `page` or `database`.  **Limitation**: Currently the only filter allowed is `object` which will filter by type of object (either `page` or `database`)"
        },
        "property": {
          "type": "string",
          "description": "The name of the property to filter by. Currently the only property you can filter by is the object type.  Possible values include `object`.   Limitation: Currently the only filter allowed is `object` which will filter by type of object (either `page` or `database`)"
        }
      },
      "additionalProperties": true
    },
    "start_cursor": {
      "type": "string",
      "description": "A `cursor` value returned in a previous response that If supplied, limits the response to results starting after the `cursor`. If not supplied, then the first page of results is returned. Refer to [pagination](https://developers.notion.com/reference/intro#pagination) for more details."
    },
    "page_size": {
      "type": "integer",
      "format": "int32",
      "description": "The number of items from the full list to include in the response. Maximum: `100`.",
      "default": 100
    }
  },
  "required": []
})
API-get-block-children (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "block_id": {
      "type": "string",
      "description": "Identifier for a [block](ref:block)"
    },
    "start_cursor": {
      "type": "string",
      "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
    },
    "page_size": {
      "type": "integer",
      "format": "int32",
      "default": 100,
      "description": "The number of items from the full list desired in the response. Maximum: 100"
    }
  },
  "required": [
    "block_id"
  ]
})
API-patch-block-children (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "block_id": {
      "type": "string",
      "description": "Identifier for a [block](ref:block). Also accepts a [page](ref:page) ID."
    },
    "children": {
      "type": "array",
      "description": "Child content to append to a container block as an array of [block objects](ref:block)",
      "items": {
        "type": "object",
        "properties": {
          "paragraph": {
            "type": "object",
            "properties": {
              "rich_text": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string"
                        },
                        "link": {
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "additionalProperties": false
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "text"
                      ]
                    }
                  },
                  "required": [
                    "text"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "required": [
              "rich_text"
            ],
            "additionalProperties": false
          },
          "bulleted_list_item": {
            "type": "object",
            "properties": {
              "rich_text": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string"
                        },
                        "link": {
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "additionalProperties": false
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "text"
                      ]
                    }
                  },
                  "required": [
                    "text"
                  ],
                  "additionalProperties": false
                }
              }
            },
            "required": [
              "rich_text"
            ],
            "additionalProperties": false
          },
          "type": {
            "type": "string",
            "enum": [
              "paragraph",
              "bulleted_list_item"
            ]
          }
        },
        "additionalProperties": false
      }
    },
    "after": {
      "type": "string",
      "description": "The ID of the existing block that the new block should be appended after."
    }
  },
  "required": [
    "block_id",
    "children"
  ]
})
API-retrieve-a-block (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "block_id": {
      "type": "string",
      "description": "Identifier for a Notion block"
    }
  },
  "required": [
    "block_id"
  ]
})
API-update-a-block (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "block_id": {
      "type": "string",
      "description": "Identifier for a Notion block"
    },
    "type": {
      "type": "object",
      "description": "The [block object `type`](ref:block#block-object-keys) value with the properties to be updated. Currently only `text` (for supported block types) and `checked` (for `to_do` blocks) fields can be updated.",
      "properties": {},
      "additionalProperties": true
    },
    "archived": {
      "type": "boolean",
      "description": "Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.",
      "default": true
    }
  },
  "required": [
    "block_id"
  ]
})
API-delete-a-block (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "block_id": {
      "type": "string",
      "description": "Identifier for a Notion block"
    }
  },
  "required": [
    "block_id"
  ]
})
API-retrieve-a-page (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "page_id": {
      "type": "string",
      "description": "Identifier for a Notion page"
    },
    "filter_properties": {
      "type": "string",
      "description": "A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: `?filter_properties=iAk8&filter_properties=b7dh`."
    }
  },
  "required": [
    "page_id"
  ]
})
API-patch-page (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "page_id": {
      "type": "string",
      "description": "The identifier for the Notion page to be updated."
    },
    "properties": {
      "type": "object",
      "description": "The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed.",
      "properties": {
        "title": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "text": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "link": {
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "required": [
                  "content"
                ],
                "additionalProperties": false
              },
              "type": {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            },
            "required": [
              "text"
            ],
            "additionalProperties": false
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "title"
          ]
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "in_trash": {
      "type": "boolean",
      "description": "Set to true to delete a block. Set to false to restore a block.",
      "default": false
    },
    "archived": {
      "type": "boolean"
    },
    "icon": {
      "type": "object",
      "description": "A page icon for the page. Supported types are [external file object](https://developers.notion.com/reference/file-object) or [emoji object](https://developers.notion.com/reference/emoji-object).",
      "properties": {
        "emoji": {
          "type": "string"
        }
      },
      "required": [
        "emoji"
      ],
      "additionalProperties": false
    },
    "cover": {
      "type": "object",
      "description": "A cover image for the page. Only [external file objects](https://developers.notion.com/reference/file-object) are supported.",
      "properties": {
        "external": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "additionalProperties": false
        },
        "type": {
          "type": "string",
          "enum": [
            "external"
          ]
        }
      },
      "required": [
        "external"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "page_id"
  ]
})
API-post-page (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "parent": {
      "type": "object",
      "properties": {
        "page_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "page_id"
      ],
      "additionalProperties": true
    },
    "properties": {
      "type": "object",
      "properties": {
        "title": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "text": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ],
                "additionalProperties": true
              }
            },
            "required": [
              "text"
            ],
            "additionalProperties": true
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "title"
          ]
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "children": {
      "type": "array",
      "description": "The content to be rendered on the new page, represented as an array of [block objects](https://developers.notion.com/reference/block).",
      "items": {
        "type": "string"
      }
    },
    "icon": {
      "type": "string",
      "format": "json",
      "description": "The icon of the new page. Either an [emoji object](https://developers.notion.com/reference/emoji-object) or an [external file object](https://developers.notion.com/reference/file-object).."
    },
    "cover": {
      "type": "string",
      "format": "json",
      "description": "The cover image of the new page, represented as a [file object](https://developers.notion.com/reference/file-object)."
    }
  },
  "required": [
    "parent",
    "properties"
  ]
})
API-create-a-database (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "parent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "page_id"
          ]
        },
        "page_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "type",
        "page_id"
      ],
      "additionalProperties": true
    },
    "properties": {
      "type": "object",
      "description": "Property schema of database. The keys are the names of properties as they appear in Notion and the values are [property schema objects](https://developers.notion.com/reference/property-schema-object).",
      "additionalProperties": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "additionalProperties": false
          }
        ]
      }
    },
    "title": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "text": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "link": {
                "type": [
                  "object",
                  "null"
                ]
              }
            },
            "required": [
              "content"
            ],
            "additionalProperties": false
          },
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          }
        },
        "required": [
          "text"
        ],
        "additionalProperties": false
      }
    }
  },
  "required": [
    "parent",
    "properties"
  ]
})
API-update-a-database (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "database_id": {
      "type": "string",
      "description": "identifier for a Notion database"
    },
    "title": {
      "type": "array",
      "description": "An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the title of the database that is displayed in the Notion UI. If omitted, then the database title remains unchanged.",
      "items": {
        "type": "object",
        "properties": {
          "text": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "link": {
                "type": [
                  "object",
                  "null"
                ]
              }
            },
            "required": [
              "content"
            ],
            "additionalProperties": false
          },
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          }
        },
        "required": [
          "text"
        ],
        "additionalProperties": false
      }
    },
    "description": {
      "type": "array",
      "description": "An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the description of the database that is displayed in the Notion UI. If omitted, then the database description remains unchanged.",
      "items": {
        "type": "object",
        "properties": {
          "text": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              },
              "link": {
                "type": [
                  "object",
                  "null"
                ]
              }
            },
            "required": [
              "content"
            ],
            "additionalProperties": false
          },
          "type": {
            "type": "string",
            "enum": [
              "text"
            ]
          }
        },
        "required": [
          "text"
        ],
        "additionalProperties": false
      }
    },
    "properties": {
      "type": "object",
      "description": "Property schema of database. The keys are the names of properties as they appear in Notion and the values are [property schema objects](https://developers.notion.com/reference/property-schema-object).",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    }
  },
  "required": [
    "database_id"
  ]
})
API-retrieve-a-database (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "database_id": {
      "type": "string",
      "description": "An identifier for the Notion database."
    }
  },
  "required": [
    "database_id"
  ]
})
API-retrieve-a-page-property (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "page_id": {
      "type": "string",
      "description": "Identifier for a Notion page"
    },
    "property_id": {
      "type": "string",
      "description": "Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values)"
    },
    "page_size": {
      "type": "integer",
      "format": "int32",
      "description": "For paginated properties. The max number of property item objects on a page. The default size is 100"
    },
    "start_cursor": {
      "type": "string",
      "description": "For paginated properties."
    }
  },
  "required": [
    "page_id",
    "property_id"
  ]
})
API-retrieve-a-comment (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "block_id": {
      "type": "string",
      "description": "Identifier for a Notion block or page"
    },
    "start_cursor": {
      "type": "string",
      "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
    },
    "page_size": {
      "type": "integer",
      "format": "int32",
      "description": "The number of items from the full list desired in the response. Maximum: 100"
    }
  },
  "required": [
    "block_id"
  ]
})
API-create-a-comment (inputSchema={
  "$defs": {},
  "type": "object",
  "properties": {
    "parent": {
      "type": "object",
      "description": "The page that contains the comment",
      "properties": {
        "page_id": {
          "type": "string",
          "description": "the page ID"
        }
      },
      "required": [
        "page_id"
      ],
      "additionalProperties": true
    },
    "rich_text": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "text": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "The content of the comment"
              }
            },
            "required": [
              "content"
            ],
            "additionalProperties": true
          }
        },
        "required": [
          "text"
        ],
        "additionalProperties": true
      }
    }
  },
  "required": [
    "parent",
    "rich_text"
  ]
})

Based on the above information, please with your instructions(see below):
