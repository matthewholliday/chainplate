from ..message import Message
from ..ainode import AiNode
from ..tree import TreeNode
from ..services.cli_service import CLIService
import json
import os

class ChainplateWorkflow:
    def __init__(self, xml_string: str):
        json_str = TreeNode.get_xml_as_json_string(xml_string)
        data = json.loads(json_str)
        self.tree = AiNode.from_dict(data)
        self.termination_message = 'Execution complete. Log location: ' + os.path.abspath('logs/execution.log')

    def run(self, message: Message, ux_service=CLIService()) -> Message: # Default to the CLI for I/O

        # TODO: return object with this info so caller can decide what to do.
        # Run and display logs:
        ux_service.show_output_to_user('')

        message = self.tree.execute(message)
        final_output = message.get_payload()
        if final_output:
            ux_service.show_output_to_user('[WORKFLOW] ==> ' + final_output)
        else:
            ux_service.show_output_to_user('No output generated by workflow.')
        
        ux_service.show_output_to_user('')
        ux_service.show_output_to_user(self.termination_message)
        message.print_logs() #TODO - pass in the FileService
        return message